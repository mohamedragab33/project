// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project.api.EntityModels;

namespace project.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200414182142_new")]
    partial class @new
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("project.api.EntityModels.Category", b =>
                {
                    b.Property<Guid>("ID_Category")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID_Category");

                    b.ToTable("Categaory");
                });

            modelBuilder.Entity("project.api.EntityModels.Posts", b =>
                {
                    b.Property<Guid>("ID_Post")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data_Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ID_Category")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Post_Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID_Post");

                    b.HasIndex("ID_Category");

                    b.HasIndex("userId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("project.api.EntityModels.Reply", b =>
                {
                    b.Property<Guid>("ID_Reply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryID_Category")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content_Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_reply")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("postsID_Post")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID_Reply");

                    b.HasIndex("CategoryID_Category");

                    b.HasIndex("UserId");

                    b.HasIndex("postsID_Post");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("project.api.EntityModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("project.api.EntityModels.catguser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_Category")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ID_User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("categoryID_Category")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("categoryID_Category");

                    b.HasIndex("userId");

                    b.ToTable("catgusers");
                });

            modelBuilder.Entity("project.api.EntityModels.Posts", b =>
                {
                    b.HasOne("project.api.EntityModels.Category", "category")
                        .WithMany()
                        .HasForeignKey("ID_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.api.EntityModels.User", "user")
                        .WithMany("Posts")
                        .HasForeignKey("userId");
                });

            modelBuilder.Entity("project.api.EntityModels.Reply", b =>
                {
                    b.HasOne("project.api.EntityModels.Category", null)
                        .WithMany("reply")
                        .HasForeignKey("CategoryID_Category");

                    b.HasOne("project.api.EntityModels.User", null)
                        .WithMany("reply")
                        .HasForeignKey("UserId");

                    b.HasOne("project.api.EntityModels.Posts", "posts")
                        .WithMany("reply")
                        .HasForeignKey("postsID_Post");
                });

            modelBuilder.Entity("project.api.EntityModels.catguser", b =>
                {
                    b.HasOne("project.api.EntityModels.Category", "category")
                        .WithMany("catgusers")
                        .HasForeignKey("categoryID_Category");

                    b.HasOne("project.api.EntityModels.User", "user")
                        .WithMany("catgusers")
                        .HasForeignKey("userId");
                });
#pragma warning restore 612, 618
        }
    }
}
